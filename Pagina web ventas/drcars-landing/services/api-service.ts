import { API_BASE_URL } from "@/utils/auth-constants"

// Interfaz para los datos que vienen de la API
export interface ApiVehicle {
  idVehiculo: number
  marca: string
  modelo: string
  annoFabricacion: number
  color: string
  kilometraje: number
  matricula: string
  numeroChasis: string
  transmision: string
  combustible: string
  precioCompra: number
  estado: string
  proveedor: {
    idProveedor: number
    nombre: string
    tipoProveedor: string
    telefono: string
    ciudad: string
  }
}

// Simplificar la funci√≥n getCatalogo para evitar manipulaci√≥n excesiva de datos
export async function getCatalogo(): Promise<ApiVehicle[]> {
  try {
    // Usar la URL base sin par√°metros adicionales
    const url = `${API_BASE_URL}/catalogo/web`
    console.log(`üîç Intentando obtener cat√°logo desde: ${url}`)

    // Realizar la petici√≥n con el header ngrok-skip-browser-warning
    console.log("‚è≥ Iniciando fetch...")
    const response = await fetch(url, {
      method: "GET",
      headers: {
        // Usar el valor "4" como en la imagen
        "ngrok-skip-browser-warning": "4",
      },
      cache: "no-store",
    })

    console.log(`‚úÖ Respuesta recibida - Status: ${response.status}, OK: ${response.ok}`)

    // Verificar si la respuesta es OK
    if (!response.ok) {
      const errorText = await response.text().catch(() => "No se pudo obtener el texto del error")
      console.error(`‚ùå Error en la respuesta: ${errorText}`)
      throw new Error(`Error al obtener el cat√°logo: ${response.status} - ${errorText}`)
    }

    // Intentar obtener el texto de la respuesta primero para depuraci√≥n
    const responseText = await response.text()
    console.log(`üìÑ Texto de respuesta recibido (primeros 200 caracteres): ${responseText.substring(0, 200)}...`)

    // Si la respuesta est√° vac√≠a
    if (!responseText.trim()) {
      console.warn("‚ö†Ô∏è La respuesta est√° vac√≠a")
      return []
    }

    // Intentar parsear el JSON
    try {
      const data = JSON.parse(responseText)

      // Verificar si data es un array
      if (Array.isArray(data)) {
        console.log(`üìä Datos recibidos: ${data.length} veh√≠culos`)

        // Si el array est√° vac√≠o
        if (data.length === 0) {
          console.warn("‚ö†Ô∏è El array de veh√≠culos est√° vac√≠o")
        } else {
          // Mostrar el primer veh√≠culo para depuraci√≥n
          console.log("üöó Primer veh√≠culo:", JSON.stringify(data[0], null, 2))
        }

        return data
      } else {
        console.error("‚ùå La respuesta no es un array:", data)
        return []
      }
    } catch (parseError) {
      console.error("‚ùå Error al parsear JSON:", parseError)
      console.error("üìÑ Texto que no se pudo parsear:", responseText.substring(0, 500))
      return []
    }
  } catch (error) {
    console.error("‚ùå Error al obtener el cat√°logo:", error)
    return []
  }
}

// Modificar la funci√≥n testApiConnection para hacerla m√°s robusta
export async function testApiConnection(): Promise<boolean> {
  try {
    // Usar el endpoint de cat√°logo que sabemos que existe
    const url = `${API_BASE_URL}/catalogo/web`
    console.log(`üîç Probando conexi√≥n con: ${url}`)

    // Agregar un timeout a la petici√≥n para evitar que se quede colgada
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 5000) // 5 segundos de timeout

    try {
      const response = await fetch(url, {
        method: "GET",
        headers: {
          "ngrok-skip-browser-warning": "4",
        },
        signal: controller.signal,
        cache: "no-store",
      })

      // Limpiar el timeout
      clearTimeout(timeoutId)

      console.log(`‚úÖ Respuesta de prueba - Status: ${response.status}, OK: ${response.ok}`)
      return response.ok
    } catch (fetchError:any) {
      // Limpiar el timeout en caso de error
      clearTimeout(timeoutId)

      if (fetchError.name === "AbortError") {
        console.error("‚ùå La petici√≥n excedi√≥ el tiempo de espera")
      } else {
        console.error(`‚ùå Error en fetch: ${fetchError.message}`)
      }
      return false
    }
  } catch (error) {
    console.error("‚ùå Error al probar la conexi√≥n:", error)
    return false
  }
}
